<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.gsau</groupId>
        <artifactId>spring_cloud_learn</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>api_8081</artifactId>
    <description>子模块块一启动端口8081</description>
    <dependencies>
        <!--lombok主要用来简化代码的编写量,常用注解含义
            @Setter                 //set方法
            @Getter                 //get方法
            @Data                   //该注解使用在类上，该注解会提供getter、setter、equals、canEqual、hashCode、toString方法。
            @Log(这是一个泛型注解，具体有很多种形式)
            @AllArgsConstructor     //该注解使用在类上，该注解提供一个全参数的构造方法，默认不提供无参构造
            @NoArgsConstructor      //该注解使用在类上，该注解提供一个无参构造
            @EqualsAndHashCode      //该注解使用在类上，该注解在类级别注释会同时生成equals和hashCode。
            @NonNull                //该注解使用在属性上，该注解用于属的非空检查，当放在setter方法的字段上，将生成一个空检查，如果为空，则抛出NullPointerException。
该注解会默认是生成一个无参构造。
            @Cleanup                    //该注解使用在属性前，该注解是用来保证分配的资源被释放。在本地变量上使用该注解，任何后续代码都将封装在try/finally中，确保当前作用于中的资源被释放。默认@Cleanup清理的方法为close，可以使用value指定不同的方法名称
            @ToString
            @RequiredArgsConstructor    //该注解使用在类上，使用类中所有带有 @NonNull 注解的或者带有 final 修饰的成员变量生成对应的构造方法
            @Value                      //这个注解用在 类 上，会生成含所有参数的构造方法，get 方法，此外还提供了equals、hashCode、toString 方法
            @SneakyThrows               //该注解使用在方法上，这个注解用在 方法 上，可以将方法中的代码用 try-catch 语句包裹起来，捕获异常并在 catch 中用 Lombok.sneakyThrow(e) 把异常抛出，可以使用 @SneakyThrows(Exception.class) 的形式指定抛出哪种异常。该注解需要谨慎使用
            @Synchronized
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!--增加Feign的依赖-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-feign</artifactId>
        </dependency>
    </dependencies>


</project>